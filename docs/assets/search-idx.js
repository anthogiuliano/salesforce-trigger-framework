export default [
	{
		title: "Home",
		fileName: "index.html",
		text: "Home General Theme Each object has a single trigger  Each trigger has a single HANDLER  Bypass Documentation \thttps://github.com/dschach/salesforce-trigger-framework/blob/main/README.md Sample Trigger  \ttrigger AccountSampleTrigger on Account(before insert, after insert, before update, after update, before delete, after delete, after undelete) {\t    new AccountSampleTriggerHandler().run();\t} Sample Handler \t/**\t * @description A sample Account trigger handler, with some comments\t *\t * @author David Schach\t * @since 2021\t * @see AccountSampleTriggerHandlerTest\t */\tpublic without sharing class AccountSampleTriggerHandler extends TriggerHandler {\t\t    private List<Account> newRecords;\t    private List<Account> oldRecords;\t    private Map<Id, Account> newRecordsMap;\t    private Map<Id, Account> oldRecordsMap;\t\t    public AccountSampleTriggerHandler() {\t        super('AccountSampleTriggerHandler');\t        this.newRecords =(List<Account>)Trigger.new;\t        this.oldRecords =(List<Account>)Trigger.old;\t        this.newRecordsMap =(Map<Id, Account>)Trigger.newMap;\t        this.oldRecordsMap =(Map<Id, Account>)Trigger.oldMap;\t    }\t\t    public override void beforeInsert(){\t        method1();\t        method2();\t        TriggerHandler.clearAllBypass();\t    }\t\t    public override void beforeUpdate(){\t        method2();\t    }\t\t    //public override void beforeDelete(){}\t\t    public override void afterInsert(){\t        TriggerHandler.bypass('ContactTriggerHandler');\t        updateContacts();\t        TriggerHandler.clearBypass('ContactTriggerHandler');\t    }\t\t    public override void afterUpdate(){\t        TriggerHandler.bypass('CaseSampleTriggerHandler');\t        // do something\t        TriggerHandler.clearAllBypasses();\t    }\t\t    //public override void afterDelete(){}\t    //public override void afterUndelete(){}\t\t\t    //**************************************************\t    // All \"handler\" methods are here for easier reading and reuse \t    //**************************************************\t\t    private void method1(){\t        for(Account a : newRecords){\t            a.Name = a.Name.toUpperCase();\t        }\t    }\t\t    private void method2(){\t        for(Account a : newRecords){\t            a.Name = a.Name.toLowerCase();\t        }\t    }\t\t    /**\t    * Try to keep all updates on other objects in a single DML statement\t    * @author Author Name\t    */\t    private void updateContacts(){\t        List<Contact> acctContacts = [SELECT Id FROM Contact WHERE AccountId IN :newRecordsMap.keyset()];\t        update acctContacts;\t    }\t} Credits  \tThis trigger framework is from\t\thttps://github.com/dschach/sfdc-trigger-framework  which is based\t\ton Kevin O'Hara's framework\t\thttps://github.com/kevinohara80/sfdc-trigger-framework"
	},
	{
		title: "TriggerHandler",
		fileName: "TriggerHandler.html",
		text: "TriggerHandler Trigger Handler virtual class as base for all trigger handlers Signature public virtual class TriggerHandler Kevin O'Hara David Schach2013 TriggerHandler Properties Name Signature Annotations Description loopCountMap private static Map<String, LoopCount> loopCountMap @TestVisible static map of handlername, times run() was invoked bypassedHandlers private static Set<String> bypassedHandlers @TestVisible All bypassed handlers globalBypass private static Boolean globalBypass @TestVisible true  if we bypass all triggers without checking the contents of bypassedHandlers showLimits private static Boolean showLimits @TestVisible true  if we include a debug statement for limits triggerEvent private System.TriggerOperation triggerEvent @TestVisible the current triggerEvent of the trigger, overridable in tests isTriggerExecuting private Boolean isTriggerExecuting @TestVisible Is this class executing in trigger context? handlerName private String handlerName The name of this handler. Set by getHandlerName() TriggerHandler Constructors TriggerHandler() TriggerHandler(handlerName) TriggerHandler() Basic constructor Signature public TriggerHandler() TriggerHandler(handlerName) Constructor with handler name to improve performance Signature public TriggerHandler(String handlerName) Parameters handlerName Type: String The name of the handler Author David Schach TriggerHandler Methods run() setMaxLoopCount(max) clearMaxLoopCount() bypass(handlerName) bypass(handlerNames) bypassAll() clearBypass(handlerName) clearBypass(handlersNames) isBypassed(handlerName) bypassList() clearAllBypasses() clearGlobalBypass() clearBypassList() setBypass(handlerName, desiredValue) showLimits() showLimits(enabled) getLoopCount(handlerName) setTriggerContext() setTriggerContext(opType, testMode) addToLoopCount() validateRun() getHandlerName() beforeInsert() beforeUpdate() beforeDelete() afterInsert() afterUpdate() afterDelete() afterUndelete() LoopCount(max) increment() exceeded() getMax() getCount() setMax(max) run() main method that will be called during execution Signature @SuppressWarnings('PMD.AvoidDebugStatements') public void run() Author Kevin O'Hara David Schach setMaxLoopCount(max) setMaxLoopCount description Signature public void setMaxLoopCount(Integer max) Parameters max Type: Integer max description Author David Schach Example this.setMaxLoopCount(5); clearMaxLoopCount() Removes the limit for the number of times we allow this class to run Signature public void clearMaxLoopCount() bypass(handlerName) bypass by string, e.g. TriggerHandler.bypass('AccountTriggerHandler') Signature public static void bypass(String handlerName) Parameters handlerName Type: String Name of the handler to be bypassed Example TriggerHandler.bypass('AccountSampleTriggerHandler') bypass(handlerNames) bypass by list, e.g. TriggerHandler.bypass(listOfHandlerStrings) Signature public static void bypass(List<String> handlerNames) Parameters handlerNames Type: List<String> List of handlernames bypassAll() bypass all handlers(clear bypassedHandlers to prevent confusion) Signature public static void bypassAll() clearBypass(handlerName) bypass a specific handler Signature public static void clearBypass(String handlerName) Parameters handlerName Type: String The class name to be bypassed Example TriggerHandler.clearBypass('AccountSampleTriggerHandler') clearBypass(handlersNames) bypass a list of handlers Signature public static void clearBypass(List<String> handlersNames) Parameters handlersNames Type: List<String> isBypassed(handlerName) a handler is considered bypassed if it was bypassed, or all handlers have been bypassed Signature public static Boolean isBypassed(String handlerName) Parameters handlerName Type: String The class name of the handler we are checking is bypassed Returns Boolean  Is this handler bypassed? Example TriggerHandler.isBypassed('AccountTriggerHandler'); bypassList() return a list of the bypassed handlers Signature public static List<String> bypassList() Returns List<String> Example TriggerHandler.bypassList(); clearAllBypasses() clear all bypasses - by clearing the global bypass and by clearing the list of bypassed handlers Signature public static void clearAllBypasses() Example TriggerHandler.clearAllBypasses(); clearGlobalBypass() clear only the global bypass flag, leaving the list of bypassed handlers intact This is useful for keeping a base set of bypassed handlers intact for an entire operation Signature public static void clearGlobalBypass() Example TriggerHandler.clearGlobalBypass(); clearBypassList() clear the entire bypass list, but keep the global bypass flag intact This is useful for resetting the list of handlers to bypass while maintaining global bypassing Signature public static void clearBypassList() Example TriggerHandler.clearBypassList(); setBypass(handlerName, desiredValue) Set bypass status to a specific value. Eliminates the need to know the current bypass status Signature public static void setBypass(String handlerName, Boolean desiredValue) Parameters handlerName Type: String The name of the TriggerHandler class desiredValue Type: Boolean true  to bypass, and false  to run the handler Example TriggerHandler.setBypass('AccountTriggerHandler', false); showLimits() Called in the trigger to force the class to debug limits when it runs Signature public static void showLimits() Example new AccountSampleTriggerHandler.showLimits().run(); showLimits(enabled) Called in the trigger to force the class to debug limits when it runs. Set to true to show limits. Signature public static void showLimits(Boolean enabled) Parameters enabled Type: Boolean true to enable; false to disable See TriggerHandler.showLimits getLoopCount(handlerName) return the current loop count Signature public static Integer getLoopCount(String handlerName) Parameters handlerName Type: String The handler class to check for the current loop count Returns Integer setTriggerContext() Base method called by constructor to set the current context Signature @TestVisible private void setTriggerContext() setTriggerContext(opType, testMode) Set the current trigger context based on the System.TriggerOperation If we are not in a trigger context, then we set isTriggerExecuting to false Signature private void setTriggerContext(    System.TriggerOperation opType,    Boolean testMode  ) Parameters opType Type:     System.TriggerOperation The operation type - set automatically by the system testMode Type:    Boolean Only used in test methods to force certain contexts See TriggerHandler.isTriggerExecuting addToLoopCount() increment the loop count Signature private void addToLoopCount() Exceptions TriggerHandlerException See TriggerHandler.TriggerHandlerException validateRun() Make sure this trigger should continue to run Returning false  causes trigger handler to exit Signature @TestVisible private Boolean validateRun() Returns Boolean  is the run valid? Exceptions TriggerHandlerException See TriggerHandler.TriggerHandlerException getHandlerName() Get the name of the current handler. This can be set by using the constructor with the string parameter to improve performance Signature @TestVisible private String getHandlerName() Returns String  handlerName beforeInsert() Virtual method for the implementing class to override Signature @SuppressWarnings('PMD.EmptyStatementBlock') protected virtual void beforeInsert() beforeUpdate() Virtual method for the implementing class to override Signature @SuppressWarnings('PMD.EmptyStatementBlock') protected virtual void beforeUpdate() beforeDelete() Virtual method for the implementing class to override Signature @SuppressWarnings('PMD.EmptyStatementBlock') protected virtual void beforeDelete() afterInsert() Virtual method for the implementing class to override Signature @SuppressWarnings('PMD.EmptyStatementBlock') protected virtual void afterInsert() afterUpdate() Virtual method for the implementing class to override Signature @SuppressWarnings('PMD.EmptyStatementBlock') protected virtual void afterUpdate() afterDelete() Virtual method for the implementing class to override Signature @SuppressWarnings('PMD.EmptyStatementBlock') protected virtual void afterDelete() afterUndelete() Virtual method for the implementing class to override Signature @SuppressWarnings('PMD.EmptyStatementBlock') protected virtual void afterUndelete() LoopCount(max) Constructor with specified max loops Signature public LoopCount(Integer max) Parameters max Type: Integer Max number of loops allowed increment() Increment the internal counter returning the results of this.exceeded(). Signature public Boolean increment() Returns Boolean  true if count will exceed max count or is less than 0. exceeded() Determines if this we're about to exceed the loop count. Signature public Boolean exceeded() Returns Boolean  true if less than 0 or more than max. getMax() Returns the max loop count. Signature public Integer getMax() Returns Integer  max loop count. getCount() Returns the current loop count. Signature public Integer getCount() Returns Integer  current loop count. setMax(max) Sets the max loop size Signature public void setMax(Integer max) Parameters max Type: Integer The integer to set max to. TriggerHandler.LoopCount inner class for managing the loop count per handler Signature @TestVisible private class LoopCount TriggerHandler.LoopCount Properties Name Signature max private Integer max count private Integer count TriggerHandler.LoopCount Constructors LoopCount() LoopCount() Default loop count to 5 Signature public LoopCount() TriggerHandler.TriggerHandlerException Exception class Signature public class TriggerHandlerException extends Exception TriggerHandler.TriggerHandlerException Properties Name Signature Annotations Description errorOutsideTriggerContext private static String errorOutsideTriggerContext @TestVisible Error text - assumes English for debug logs"
	},
	{
		title: "TriggerHandlerTest",
		fileName: "TriggerHandlerTest.html",
		text: "TriggerHandlerTest Test class for base TriggerHandler class Signature @isTest private class TriggerHandlerTest Kevin O'Hara David Schach2013 TriggerHandlerTest Properties Name Signature lastMethodCalled private static String lastMethodCalled handler private static TriggerHandlerTest.TestHandler handler TriggerHandlerTest Methods testBeforeInsert() testBeforeUpdate() testBeforeDelete() testAfterInsert() testAfterUpdate() testAfterDelete() testAfterUndelete() testNonTriggerContext() testConstructorWithParameter() testConstructorWithParametersAndBypass() testBypassAPI() testBeforeInsertWithLimits() testLoopCount() testLoopCountClass() assertTestHandlerName() testVirtualMethods() testOutsideTrigger() resetTest() beforeInsertMode() beforeUpdateMode() beforeDeleteMode() afterInsertMode() afterUpdateMode() afterDeleteMode() afterUndeleteMode() testBeforeInsert() Signature @isTest static void testBeforeInsert() testBeforeUpdate() Signature @isTest static void testBeforeUpdate() testBeforeDelete() Signature @isTest static void testBeforeDelete() testAfterInsert() Signature @isTest static void testAfterInsert() testAfterUpdate() Signature @isTest static void testAfterUpdate() testAfterDelete() Signature @isTest static void testAfterDelete() testAfterUndelete() Signature @isTest static void testAfterUndelete() testNonTriggerContext() Signature @isTest static void testNonTriggerContext() testConstructorWithParameter() Signature @isTest static void testConstructorWithParameter() testConstructorWithParametersAndBypass() Signature @isTest static void testConstructorWithParametersAndBypass() testBypassAPI() test bypass api Signature @isTest static void testBypassAPI() testBeforeInsertWithLimits() Test and show limits Signature @isTest static void testBeforeInsertWithLimits() testLoopCount() instance method tests Signature @isTest static void testLoopCount() testLoopCountClass() Signature @isTest static void testLoopCountClass() assertTestHandlerName() ensure that the current handler name is as expected Signature private static void assertTestHandlerName() testVirtualMethods() test virtual methods Signature @isTest private static void testVirtualMethods() testOutsideTrigger() call from outside trigger Signature @isTest private static void testOutsideTrigger() resetTest() Signature private static void resetTest() beforeInsertMode() Signature private static void beforeInsertMode() beforeUpdateMode() Signature private static void beforeUpdateMode() beforeDeleteMode() Signature private static void beforeDeleteMode() afterInsertMode() Signature private static void afterInsertMode() afterUpdateMode() Signature private static void afterUpdateMode() afterDeleteMode() Signature private static void afterDeleteMode() afterUndeleteMode() Signature private static void afterUndeleteMode() TriggerHandlerTest.TestHandler test implementation of the TriggerHandler Signature private class TestHandler extends TriggerHandler TriggerHandlerTest.TestHandler Constructors TestHandler() TestHandler(handlerName) TestHandler() Invoke constructor Signature public TestHandler() TestHandler(handlerName) Override the trigger handler constructor that takes the handler name as a parameter Signature @SuppressWarnings('PMD.EmptyStatementBlock') public TestHandler(String handlerName) Parameters handlerName Type: String The handler name to instantiate TriggerHandlerTest.TestHandler Methods beforeInsert() beforeUpdate() beforeDelete() afterInsert() afterUpdate() afterDelete() afterUndelete() beforeInsert() Signature public override void beforeInsert() beforeUpdate() Signature public override void beforeUpdate() beforeDelete() Signature public override void beforeDelete() afterInsert() Signature public override void afterInsert() afterUpdate() Signature public override void afterUpdate() afterDelete() Signature public override void afterDelete() afterUndelete() Signature public override void afterUndelete()"
	}
];
